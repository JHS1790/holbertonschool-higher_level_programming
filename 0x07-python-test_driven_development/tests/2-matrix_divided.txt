>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


>>> GoodMatrix = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]
>>> EmptyMatrix = []
>>> IrregularMatrix = [[1, 2, 3, 4], [5, 6], [7, 8, 9]]
>>> WrongMatrix = [["Neo", 3, 'j'], [[], {}, ()]]

>>> print(matrix_divided(GoodMatrix, 2))
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]

>>> print(matrix_divided(GoodMatrix, 1))
[[2.0, 4.0, 6.0], [8.0, 10.0, 12.0], [14.0, 16.0, 18.0]]

>>> matrix_divided(GoodMatrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> matrix_divided(GoodMatrix, 'j')
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(IrregularMatrix, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> matrix_divided(EmptyMatrix, 9)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(WrongMatrix, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided(GoodMatrix, float("inf")))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> matrix_divided(GoodMatrix)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
